// generated by Fast Light User Interface Designer (fluid) version 1.0304

#include "gui.h"

void GUI::cb_DBG_i(Fl_Button*, void*) {
  DBG_cb();
}
void GUI::cb_DBG(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_DBG_i(o,v);
}

void GUI::cb_FreeCam_i(Fl_Button*, void*) {
    FreeCam_cb();
}
void GUI::cb_FreeCam(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_FreeCam_i(o,v);
}

void GUI::cb_PathCam_i(Fl_Button*, void*) {
    PathCam_cb();
}
void GUI::cb_PathCam(Fl_Button* o, void* v) {
    ((GUI*)(o->parent()->user_data()))->cb_PathCam_i(o, v);
}

//////////
void GUI::cb_SM1_i(Fl_Button*, void*) {
    SM1_cb();
}
void GUI::cb_SM1(Fl_Button* o, void* v) {
    ((GUI*)(o->parent()->user_data()))->cb_SM1_i(o, v);
}
void GUI::cb_SM2_i(Fl_Button*, void*) {
    SM2_cb();
}
void GUI::cb_SM2(Fl_Button* o, void* v) {
    ((GUI*)(o->parent()->user_data()))->cb_SM2_i(o, v);
}
void GUI::cb_SM3_i(Fl_Button*, void*) {
    SM3_cb();
}
void GUI::cb_SM3(Fl_Button* o, void* v) {
    ((GUI*)(o->parent()->user_data()))->cb_SM3_i(o, v);
}
////////
#include "scene.h"

GUI::GUI() {
    int h = 30; int w = 80; int p = 15;
  { uiw = new Fl_Double_Window(300, 250, "GUI");
    uiw->user_data((void*)(this));
    { Fl_Button* o = new Fl_Button(p, p, w, h, "DBG");
      o->selection_color(FL_DARK_RED);
      o->callback((Fl_Callback*)cb_DBG);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(p, (p + h) + p, w, h, "Free Cam");
      o->callback((Fl_Callback*)cb_FreeCam);
    } // Fl_Return_Button* o
    { Fl_Button* o = new Fl_Button(p, 2 * (p + h) + p, w, h, "Path Cam");
  	  o->callback((Fl_Callback*)cb_PathCam);
    } // Fl_Return_Button* o
        // lighting buttons
    { Fl_Button* o = new Fl_Button(2 * p + w, p, 2 * w, h, "SM1: No Lighting");
  	  o->callback((Fl_Callback*)cb_SM1);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(2 * p + w, (p + h) + p, 2 * w, h, "SM2: Per Vertex");
      o->callback((Fl_Callback*)cb_SM2);
    } // Fl_Return_Button* o
    { Fl_Button* o = new Fl_Button(2 * p + w, 2 * (p + h) + p, 2 * w, h, "SM3: Per Pixel");
      o->callback((Fl_Callback*)cb_SM3);
    } // Fl_Return_Button* o
    uiw->end();
  } // Fl_Double_Window* uiw
}

int main(int argc, char **argv) {
  scene = new Scene;
  return Fl::run();
}

void GUI::show() {
  uiw->show();
}

void GUI::DBG_cb() {
  scene->DBG();
}

void GUI::FreeCam_cb() {
  scene->FreeCam();
}

void GUI::PathCam_cb() {
    scene->PathCam();
}

void GUI::SM1_cb() {
    scene->SM1();
}
void GUI::SM2_cb() {
    scene->SM2();
}
void GUI::SM3_cb() {
    scene->SM3();
}
